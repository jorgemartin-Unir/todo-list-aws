pipeline {
    agent any
     options {
            //skipDefaultCheckout(true)
            buildDiscarder(logRotator(numToKeepStr: '10'))
            //timestamps()
    }
    stages {
        stage('Clean'){    
            steps {
                echo "Borramos directorio"
                deleteDir()
                sh 'printenv'
            }
        }
        stage('Checkout') {
            steps {
                
                echo "Obtenemos brach develop Git Server"
                
                //sh "git clone https://${env.CODECOMMIT_USER}:${env.CODECOMMIT_PASSWORD}@git-codecommit.us-east-1.amazonaws.com/v1/repos/todo-list-aws"
                //descargamos codigo fuente
                //rama develop
                sh "git clone --single-branch --branch develop https://${env.CODECOMMIT_USER}:${env.CODECOMMIT_PASSWORD}@github.com/jorgemartin-Unir/todo-list-aws.git"
                
            }
        }
        stage('Test Group'){
            agent {
               //instalamos imagen con python. No he conseguido que funcione el virtualenv
               //ni python en la maquina ec2.Por defecto esta intalada la 2.7. He instalado la
               // 3.8.2, pero al instalar el virtual da un error la 2.7. 
               // Supongo que es error de PATH
               docker {
                    image 'python:3-alpine'
                     args '-u root:root'
                }
            }
            stages{
                stage('Setup') {
                    steps{
                       //instalamos utilidades test
                       dir("todo-list-aws/tests") {
                            sh 'pip install --user -r tests/requirements.txt'
                        } 
                      
                    }
                }
                stage('Test'){
                    steps{
                        echo "Radon test"
                        dir("todo-list-aws/src") {
                            // Static program analysis -> radon
                            echo "Comprobamos si todos los modulos tienen una calidad de B o superior"
                            script{
                                //parametro nc mustra los que tengan inferior por terminal. Capturo salida sh. 
                                //Si no hay por debajo o igual no hay salida
                                RESULTVALUE = sh (
                                    returnStdout: true,
                                    script: "radon cc -nc ." 
                                    
                                ).trim()
                            echo "Resultado Radon: $RESULTVALUE"
                
                            if (RESULTVALUE !="")
                                error "No todos los modulos poseen la calidad deseada. No continuamos"
                            }
                        }
                        dir("todo-list-aws/test") {
                            // Quality program analysis -> flake8
                            echo 'Test calidad'
                        }
                        
                    
                        
                        dir("todo-list-aws/test") {
                            // Security programa analysis -> bandit
                            echo 'Test seguridad'
                        }
                        
                    
                       
                       echo "Unit test"
                       dir("todo-list-aws/tests/unit") {
                            // Unitary testing -> unittest or pytest
                            //modifico modulo TestToDo.py para que la prueba genere xml
                             // Unitary testing -> unittest or pytest
                            sh ''
                            echo "unittest"
                            sh "python -m unittest TestToDo.py"
                            echo "coverage report -m"
                            sh "coverage report -m"
                        }
                    
                    }
                 
                    post {
                         always {
                         junit 'test-reports/*.xml'
                        }
                    }
                } 
            }
        }
        stage('Build') {
            steps {
                
               dir("todo-list-aws") {
                    // Build release
                    echo 'Build'
                    sh "sam build"
                    // Package release and persist in s3 bucket
                    //Si las credenciales han caducado, esto falla.
                    //retorna errores. A revisar
                    sh "sam package --template-file template.yaml --output-template-file packaged.yaml --s3-bucket ${env.COUNTRY}-${env.TEAM}-${env.ENVIRONMENT}-${env.SERVICE}-${env.RAND_ID}-artifacts" 
                }
                  
            }
        }
        stage('Integration Test on local') {
            steps{
                /*  //Pruebas de integracion local no finalizadas. 
                  //Arrancar el servio local http y concectarse desde curl o test python
                  //falta informacion
                    // Unittest or pytest                   
                    // Integration test over local -> unittest or pytest against the lambda functions.
                    parallel (
                      a:{   
                            dir("todo-list-aws") {
                            //script inicia server local
                                sh "./samlocal.sh"
                            }
                      },
                      b:{
                            sleep 5 
                            script {
                                string code =
                                sh(script: "curl -sLI -w '%{http_code}' GET https://127.0.0.1:8282/todos", returnStdout: true)
                                echo "HTTP response status code: $code"
            
                                if (code == "200") {
                                    echo response
                                }else
                                {
                                    error "Error test integración LIST"
                                }
                            }
                       }
                    )
                    
                */
                
                echo "Integration Test on local"
            }   
        }
        
        stage('Deploy'){
            steps{
                
                dir("todo-list-aws") {
                    // Deploy architecture
                    sh "yes | sam deploy --no-fail-on-empty-changeset --stack-name ${env.STACK_NAME} --parameter-overrides  Environment=${env.ENVIRONMENT}"
                }
                
            }
        }
        stage('Integration Test after deploy'){
            steps{
                
                script {
                   
                   script {
                            string code =
                            sh(script: "curl -sLI -w '%{http_code}' GET https://z4vv25xb71.execute-api.us-east-1.amazonaws.com/Prod/todos", returnStdout: true)
                            echo "HTTP response status code: $code"
                            if (code != "200") {
                                echo response
                            }else
                            {
                                error "Error test integración LIST"
                            }
                        }
                  echo "Integration Test after deploy:OK"
                    
                  
                }
                
            }
       }

    }
}
